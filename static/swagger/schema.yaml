openapi: 3.0.3
info:
  title: Swagger Petstore - OpenAPI 3.0
  version: 1.0.0
  description: |-
    This is a sample Pet Store Server based on the OpenAPI 3.0 specification.  You can find out more about
    Swagger at [http://swagger.io](http://swagger.io). In the third iteration of the pet store, we've switched to the design first approach!
    You can now help us improve the API whether it's by making changes to the definition itself or to the code.
    That way, with time, we can improve the API in general, and expose some of the new features in OAS3.

    If you're looking for the Swagger 2.0/OAS 2.0 version of Petstore, then click Alternatively, you can load via the `Edit > Load Petstore
    OAS 2.0` menu option!

    Some useful links:
    - [The Pet Store repository](https://github.com/vsraccubits/swagger-petstore)
  termsOfService: http://swagger.io/terms/
  contact:
    email: varun.sr@accubits.com
  license:
    name: Apache 2.0
    url: http://www.apache.org/licenses/LICENSE-2.0
paths:
  /pet/:
    post:
      operationId: pet_create
      description: Add a new pet to the store
      summary: Add a new pet to the store
      tags:
      - pet
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Pet'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/Pet'
        required: true
      security:
      - basicAuth: []
      - tokenAuth: []
      - {}
      responses:
        '201':
          content:
            application/json:
              schema:
                type: object
                additionalProperties: {}
              examples:
                Success:
                  value:
                    id: 0
                    name: string
                    category:
                      id: 0
                      name: string
                    photoUrls:
                    - string
                    tags:
                    - id: 0
                      name: string
                    status: string
                  summary: success
          description: Successful operation
        '404':
          description: Bad Request
  /pet/{petId}/:
    get:
      operationId: pet_retrieve
      description: Returns a single pet
      summary: Find pet by ID
      parameters:
      - in: path
        name: petId
        schema:
          type: integer
        description: A unique integer value identifying this pet.
        required: true
      tags:
      - pet
      security:
      - basicAuth: []
      - tokenAuth: []
      - {}
      responses:
        '200':
          content:
            application/json:
              schema:
                type: object
                additionalProperties: {}
              examples:
                Success:
                  value:
                    id: 0
                    name: string
                    category:
                      id: 0
                      name: string
                    photoUrls:
                    - string
                    tags:
                    - id: 0
                      name: string
                    status: string
                  summary: success
          description: Successful operation
        '400':
          description: Invalid ID supplied
        '404':
          description: Pet not found
    put:
      operationId: pet_update
      description: Update an existing pet by Id
      summary: Update an existing pet
      parameters:
      - in: path
        name: petId
        schema:
          type: integer
        description: A unique integer value identifying this pet.
        required: true
      tags:
      - pet
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Pet'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/Pet'
        required: true
      security:
      - basicAuth: []
      - tokenAuth: []
      - {}
      responses:
        '200':
          content:
            application/json:
              schema:
                type: object
                additionalProperties: {}
              examples:
                Success:
                  value:
                    id: 0
                    name: string
                    category:
                      id: 0
                      name: string
                    photoUrls:
                    - string
                    tags:
                    - id: 0
                      name: string
                    status: string
                  summary: success
          description: Successful operation
        '400':
          description: Invalid ID supplied
        '404':
          description: Pet not found
        '405':
          description: Validation exception
    patch:
      operationId: pet_partial_update
      description: Update fields of an existing pet by Id
      summary: Partially update an existing pet
      parameters:
      - in: path
        name: petId
        schema:
          type: integer
        description: A unique integer value identifying this pet.
        required: true
      tags:
      - pet
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PatchedPet'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/PatchedPet'
      security:
      - basicAuth: []
      - tokenAuth: []
      - {}
      deprecated: true
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Pet'
          description: ''
    delete:
      operationId: pet_destroy
      description: ModelViewSet for viewing and editing pet model.
      summary: Deletes a pet
      parameters:
      - in: path
        name: petId
        schema:
          type: integer
        description: A unique integer value identifying this pet.
        required: true
      tags:
      - pet
      security:
      - basicAuth: []
      - tokenAuth: []
      - {}
      responses:
        '204':
          description: No response body
        '400':
          description: Invalid pet value
  /pet/{petId}/uploadImage/:
    post:
      operationId: pet_uploadImage_create
      description: Extra action to upload pet image.
      summary: Uploads an image
      parameters:
      - in: path
        name: petId
        schema:
          type: integer
        description: A unique integer value identifying this pet.
        required: true
      tags:
      - pet
      requestBody:
        content:
          multipart/form-data:
            schema:
              type: object
              properties:
                photo:
                  type: string
                  format: binary
      security:
      - basicAuth: []
      - tokenAuth: []
      - {}
      responses:
        '200':
          content:
            application/json:
              schema:
                type: object
                additionalProperties: {}
              examples:
                Success:
                  value:
                    status: 200
                    type: success
                    message:
                      id: 0
                      name: string
                      category:
                        id: 0
                        name: string
                      photoUrls:
                      - string
                      tags:
                      - id: 0
                        name: string
                      status: string
                  summary: success
          description: Successful operation
        '400':
          description: Invalid ID supplied
        '404':
          description: Pet not found
  /pet/find/findByStatus/:
    get:
      operationId: pet_find_findByStatus_retrieve
      description: Multiple status values can be provided with comma separated strings
      summary: Find Pets by status
      parameters:
      - in: query
        name: status
        schema:
          type: string
          enum:
          - available
          - pending
          - sold
        description: Status values that need to be considered for filter
      tags:
      - pet
      security:
      - basicAuth: []
      - tokenAuth: []
      - {}
      responses:
        '200':
          content:
            application/json:
              schema:
                type: object
                additionalProperties: {}
              examples:
                Success:
                  value:
                  - id: 0
                    name: string
                    category:
                      id: 0
                      name: string
                    photoUrls:
                    - string
                    tags:
                    - id: 0
                      name: string
                    status: string
                  summary: success
          description: Successful operation
        '400':
          description: Invalid status value
  /pet/find/findByTags/:
    get:
      operationId: pet_find_findByTags_retrieve
      description: Multiple tags can be provided with comma separated strings.                 Use
        tag1, tag2, tag3 for testing.
      summary: Find Pets by tags
      parameters:
      - in: query
        name: tags
        schema:
          type: array
          items:
            type: string
        description: Tags to filter by
      tags:
      - pet
      security:
      - basicAuth: []
      - tokenAuth: []
      - {}
      responses:
        '200':
          content:
            application/json:
              schema:
                type: object
                additionalProperties: {}
              examples:
                Success:
                  value:
                  - id: 0
                    name: string
                    category:
                      id: 0
                      name: string
                    photoUrls:
                    - string
                    tags:
                    - id: 0
                      name: string
                    status: string
                  summary: success
          description: Successful operation
        '400':
          description: Invalid tag value
  /pet/formdata/{petId}/:
    patch:
      operationId: pet_formdata_partial_update
      description: Viewset for partially update name and status of a Pet.
      summary: Updates a pet in the store with form data
      parameters:
      - in: path
        name: petId
        schema:
          type: string
        description: ID of pet that needs to be updated
        required: true
      - in: query
        name: name
        schema:
          type: string
        description: Name of pet that needs to be updated
      - in: query
        name: status
        schema:
          type: string
        description: Status of pet that needs to be updated
      tags:
      - pet
      security:
      - basicAuth: []
      - tokenAuth: []
      - {}
      responses:
        '200':
          content:
            application/json:
              schema:
                type: object
                additionalProperties: {}
              examples:
                Success:
                  value:
                    id: 0
                    name: string
                    category:
                      id: 0
                      name: string
                    photoUrls:
                    - string
                    tags:
                    - id: 0
                      name: string
                    status: string
                  summary: success
          description: Successful operation
        '400':
          description: Invalid input
        '404':
          description: Pet not found
  /store/inventory/:
    get:
      operationId: store_inventory_retrieve
      description: Returns a map of status codes to quantities
      summary: Returns pet inventories by status
      tags:
      - store
      security:
      - basicAuth: []
      - tokenAuth: []
      - {}
      responses:
        '200':
          content:
            application/json:
              schema:
                type: object
                additionalProperties: {}
              examples:
                Success:
                  value:
                    available: string
                    pending: string
                    sold: string
                  summary: success
          description: Successful operation
  /store/order/:
    post:
      operationId: store_order_create
      description: Place a new order in the store
      summary: Place an order for a pet
      tags:
      - store
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Order'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/Order'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/Order'
        required: true
      security:
      - basicAuth: []
      - tokenAuth: []
      - {}
      responses:
        '200':
          content:
            application/json:
              schema:
                type: object
                additionalProperties: {}
              examples:
                Success:
                  value:
                    id: 0
                    quantity: 0
                    ship_date: '2022-10-13T15:25:32.425Z'
                    status: placed
                    complete: true
                    pet: 0
                  summary: success
          description: Successful operation
        '400':
          description: Invalid input
  /store/order/{orderId}/:
    get:
      operationId: store_order_retrieve
      description: Retrive order by ID.
      summary: Find purchase order by ID
      parameters:
      - in: path
        name: orderId
        schema:
          type: integer
        required: true
      tags:
      - store
      security:
      - basicAuth: []
      - tokenAuth: []
      - {}
      responses:
        '200':
          content:
            application/json:
              schema:
                type: object
                additionalProperties: {}
              examples:
                Success:
                  value:
                    id: 0
                    quantity: 0
                    ship_date: '2022-10-13T15:25:32.425Z'
                    status: placed
                    complete: true
                    pet: 0
                  summary: success
          description: Successful operation
        '404':
          description: Order not found
    delete:
      operationId: store_order_destroy
      description: Delete an order by ID.
      summary: Delete purchase order by ID
      parameters:
      - in: path
        name: orderId
        schema:
          type: integer
        required: true
      tags:
      - store
      security:
      - basicAuth: []
      - tokenAuth: []
      - {}
      responses:
        '204':
          description: No response body
        '404':
          description: Order not found
  /user/:
    post:
      operationId: user_create
      description: This can only be done by the logged in user.
      summary: Create user
      tags:
      - user
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/User'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/User'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/User'
        required: true
      security:
      - basicAuth: []
      - tokenAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                type: object
                additionalProperties: {}
              examples:
                Success:
                  value:
                    id: 0
                    username: string
                    firstName: string
                    lastName: string
                    email: swagger@email.com
                    password: '12345'
                    phone: string
                    userStatus: 1
                  summary: success
          description: Successful operation
        '400':
          description: Invalid input
        '401':
          description: Unauthorized
  /user/{userName}/:
    get:
      operationId: user_retrieve
      description: GenericAPIView Retrive, Update, Delete user by username.
      summary: Get user by username
      parameters:
      - in: path
        name: userName
        schema:
          type: string
        required: true
      tags:
      - user
      security:
      - basicAuth: []
      - tokenAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                type: object
                additionalProperties: {}
              examples:
                Success:
                  value:
                    id: 0
                    username: string
                    firstName: string
                    lastName: string
                    email: swagger@email.com
                    password: '12345'
                    phone: string
                    userStatus: 1
                  summary: success
          description: Successful operation
        '401':
          description: Unauthorized
        '404':
          description: User not found
    put:
      operationId: user_update
      description: This can only be done by the logged in user.
      summary: Update user
      parameters:
      - in: path
        name: userName
        schema:
          type: string
        required: true
      tags:
      - user
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/User'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/User'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/User'
        required: true
      security:
      - basicAuth: []
      - tokenAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                type: object
                additionalProperties: {}
              examples:
                Success:
                  value:
                    id: 0
                    username: string
                    firstName: string
                    lastName: string
                    email: swagger@email.com
                    password: '12345'
                    phone: string
                    userStatus: 1
                  summary: success
          description: Successful operation
        '401':
          description: Unauthorized
        '404':
          description: User not found
    delete:
      operationId: user_destroy
      description: This can only be done by the logged in user.
      summary: Delete user
      parameters:
      - in: path
        name: userName
        schema:
          type: string
        required: true
      tags:
      - user
      security:
      - basicAuth: []
      - tokenAuth: []
      responses:
        '204':
          description: No response body
        '401':
          description: Unauthorized
        '404':
          description: User not found
  /user/auth/login/:
    get:
      operationId: user_auth_login_retrieve
      description: View logged user into the system.
      summary: Logs user into the system
      parameters:
      - in: query
        name: username
        schema:
          type: string
        description: The user name for login
      - in: query
        name: password
        schema:
          type: string
        description: The password for login in clear text
      tags:
      - user
      security:
      - basicAuth: []
      - tokenAuth: []
      - {}
      responses:
        '200':
          content:
            application/json:
              schema:
                type: object
                additionalProperties: {}
              examples:
                Success:
                  value:
                    token: string
                  summary: success
          description: Successful operation
        '400':
          description: Invalid username/password supplied
  /user/auth/logout/:
    post:
      operationId: user_auth_logout_create
      description: View logout current loggedin user.
      summary: Logs out current logged in user session
      tags:
      - user
      security:
      - basicAuth: []
      - tokenAuth: []
      responses:
        '200':
          description: Successful operation
        '400':
          description: Not logged in
        '401':
          description: Unauthorized
  /user/create/createWithList/:
    post:
      operationId: user_create_createWithList_create
      description: Creates list of users with given input array
      summary: Create list of users with given input array
      tags:
      - user
      requestBody:
        content:
          application/json:
            schema:
              type: array
              items:
                $ref: '#/components/schemas/User'
          application/x-www-form-urlencoded:
            schema:
              type: array
              items:
                $ref: '#/components/schemas/User'
          multipart/form-data:
            schema:
              type: array
              items:
                $ref: '#/components/schemas/User'
        required: true
      security:
      - basicAuth: []
      - tokenAuth: []
      - {}
      responses:
        '200':
          content:
            application/json:
              schema:
                type: object
                additionalProperties: {}
              examples:
                Success:
                  value:
                    status: 200
                    type: success
                    message:
                    - id: 0
                      username: string
                      firstName: string
                      lastName: string
                      email: swagger@email.com
                      password: '12345'
                      phone: string
                      userStatus: 1
                  summary: success
          description: Successful operation
        '400':
          description: Invalid input
components:
  schemas:
    Category:
      type: object
      description: Serializer for Category model.
      properties:
        id:
          type: integer
          readOnly: true
        name:
          type: string
          title: Category Name
          maxLength: 100
      required:
      - id
      - name
    Order:
      type: object
      description: Serializer for Order model.
      properties:
        id:
          type: integer
          readOnly: true
        quantity:
          type: integer
          title: Order Quantity
        ship_date:
          type: string
          format: date-time
          readOnly: true
          title: Order Date Time
        status:
          enum:
          - placed
          - approved
          - delivered
          type: string
          title: Order Status
        complete:
          type: boolean
          title: Order Complete
        pet:
          type: integer
          title: Order Pet
      required:
      - id
      - pet
      - quantity
      - ship_date
    PatchedPet:
      type: object
      description: Serializer for Pet model.
      properties:
        id:
          type: integer
          readOnly: true
        category:
          $ref: '#/components/schemas/Category'
        photo_urls:
          type: array
          items:
            $ref: '#/components/schemas/PhotoUrls'
          readOnly: true
        tags:
          type: array
          items:
            $ref: '#/components/schemas/Tag'
        name:
          type: string
          title: Pet Name
          maxLength: 100
        status:
          enum:
          - available
          - pending
          - sold
          type: string
          title: Pet Status
    Pet:
      type: object
      description: Serializer for Pet model.
      properties:
        id:
          type: integer
          readOnly: true
        category:
          $ref: '#/components/schemas/Category'
        photo_urls:
          type: array
          items:
            $ref: '#/components/schemas/PhotoUrls'
          readOnly: true
        tags:
          type: array
          items:
            $ref: '#/components/schemas/Tag'
        name:
          type: string
          title: Pet Name
          maxLength: 100
        status:
          enum:
          - available
          - pending
          - sold
          type: string
          title: Pet Status
      required:
      - category
      - id
      - name
      - photo_urls
      - tags
    PhotoUrls:
      type: object
      description: Serializer for PhotoUrl model.
      properties:
        id:
          type: integer
          readOnly: true
        photo:
          type: string
          format: uri
      required:
      - id
      - photo
    Tag:
      type: object
      description: Serializer for Tag model.
      properties:
        id:
          type: integer
          readOnly: true
        name:
          type: string
          title: Tag Name
          maxLength: 100
      required:
      - id
      - name
    User:
      type: object
      description: Serializer for User model.
      properties:
        username:
          type: string
          description: Required. 150 characters or fewer. Letters, digits and @/./+/-/_
            only.
          pattern: ^[\w.@+-]+$
          maxLength: 150
        first_name:
          type: string
          maxLength: 150
        last_name:
          type: string
          maxLength: 150
        email:
          type: string
          format: email
          title: Email address
          maxLength: 254
        phone:
          type: string
          title: User Phone
          maxLength: 12
        user_status:
          enum:
          - 1
          - 2
          - 3
          - 4
          type: integer
        password:
          type: string
          maxLength: 128
      required:
      - password
      - phone
      - username
  securitySchemes:
    basicAuth:
      type: http
      scheme: basic
    tokenAuth:
      type: apiKey
      in: header
      name: Authorization
      description: Token-based authentication with required prefix "Token"
servers:
- url: http://localhost:8000/api/v1
tags:
- name: pet
  description: Everything about your Pets
  externalDocs:
    description: Find out more
    url: http://swagger.io
- name: store
  description: Access to Petstore orders
  externalDocs:
    description: Find out more about our store
    url: http://swagger.io
- name: user
  description: Operations about user
externalDocs:
  url: https://docs.google.com/document/d/1vtj2gmCNfnIYF3SM13QGJZD2SAFzLtGVEtpD9-uKSos/edit?usp=sharing
  description: Find out more about OpenAPI3
